module part3(clock, reset, ParallelLoadn, RotateRight, ASRight, Data_IN, Q);
	input logic clock, reset, ParallelLoadn, RotateRight, ASRight;
	input logic [3:0] Data_IN;
	output logic [3:0] Q;

	logic [3:0] temp1;
	logic temp2;

	assign Q[0] = temp1[0];
	assign Q[1] = temp[1];
	assign Q[2] = temp[2];
	assign Q[3] = temp[3];

	mux2to1 call0 (temp1[0], temp1[3], ASRight, temp2);
	
	// Four Cases
	subcircuit bit0 (temp1[3], temp1[1], RotateRight, Data_IN[0], ParallelLoadn, clock, reset, Q[0]);
	subcircuit bit1 (temp1[0], temp1[2], RotateRight, Data_IN[1], ParallelLoadn, clock, reset, Q[1]);
	subcircuit bit2 (temp1[1], temp1[3], RotateRight, Data_IN[2], ParallelLoadn, clock, reset, Q[2]);
	subcircuit bit3 (temp1[2], temp1[0], RotateRight, Data_IN[3], ParallelLoadn, clock, reset, Q[3]);
endmodule

module register(input logic clk, input logic reset_b, input logic d, output logic q);
	always_ff @(posedge clk)
	begin
		if (reset_b) q <= 0;
		else q <= d;
	end
endmodule

module mux2to1(input logic x, input logic y, input logic s, output logic f);
	assign f = (~s & x) | (s & y);
endmodule

module subcircuit(input logic right, 
	      input logic left, 
	      input logic Loadleft, 
	      input logic D, 
	      input logic loadn, 
	      input logic clock, 
	      input logic reset, 
	      output logic Q
	);
	// check the value of parallelload, rotateright, asright, and rotate to determine the type of rotate that must occur.
	logic tempout, tempout2;
	
	mux2to1 u0 (right, left, Loadleft, tempout);
	mux2to1 u1 (D, tempout, loadn, tempout2);
	register u2 (clock, reset, tempout2, Q);
endmodule 

