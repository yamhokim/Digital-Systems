// Lab 4 Part 3 Verilog

module D_flip_flop(input logic clk, 
			input logic reset, 
			input logic d, 
			output logic q);
	always_ff @(posedge clk)
	begin
		if (reset_b) q <= 0;
		else q <= d;
	end
endmodule 

module subcircuit(input logic right,
			input logic left,
			input logic LoadLeft,
			input logic D,
			input logic loadn,
			input logic clock,
			input logic reset, 
			output logic Q);

	logic mux_outer, mux_inner;

	mux2to1 u0(.x(right), .y(left), .s(Loadleft), .f(mux_outer));
	mux2to1 u1(.x(D), .y(mux_outer), .s(loadn), .f(mux_inner));
	D_flip_flop(.clk(clock), .reset(reset), .d(mux_inner), .q(Q));
endmodule 

module mux2to1(input logic x, input logic y, input logic s, output logic f);
	assign f = (~s & x) | (s & y);
endmodule

module part3(input logic clock,
		input logic reset, 
		input logic ParallelLoadn,
		input logic RotateRight
		input logic ASRight,
		input logic [3:0] Data_IN,
		output logic [3:0] Q);

	subcircuit bit0(Q[1], Q[3], RotateRight, Data_IN[0], ParallelLoadn, clock, reset, Q[0]);
	subcircuit bit1(Q[2], Q[0], RotateRight, Data_IN[1], ParallelLoadn, clock, reset, Q[1]);
	subcircuit bit2(Q[3], Q[1], RotateRight, Data_IN[2], ParallelLoadn, clock, reset, Q[2]);
	subcircuit bit3(Q[0], Q[2], RotateRight, Data_IN[3], ParallelLoadn, clock, reset, Q[3]);
endmodule

